// Basic Aggregation - $match and $project
// Lab - $match

PROBLEM # 1:

Pick a movie for our next movie night!

Based on employee polling, it has been decided that potential movies must meet the following criteria:

(A) imdb.rating is at least 7
(B) genres does not contain "Crime" or "Horror"
(C) rated is either "PG" or "G"
(D) languages contains "English" and "Japanese"

SOLUTION:

Step 1:  - Execute mongodb command to get information related to movies dataset

db.movies.findOne()

Step 2:  - $match stage to filter all documents in 'movies' collection based on given condition(s)

(Condition # 1) imdb.rating is at least 7

{
    "imdb.rating": {
        "$gte": 7
    }
}

(Condition # 2) genres does not contain "Crime" or "Horror"

{
    "genres": {
        "$nin": ["Crime", "Horror"]
    }
}

(Condition # 3) rated is either "PG" or "G"

{
    "rated": {
        "$in": ["PG", "G"]
    }
}

(Condition # 4) languages contains "English" and "Japanese"

{
    "languages": {
        "$all": ["English", "Japanese"]
    }
}

Filter: 

{
    "$match": {
        "imdb.rating": {
            "$gte": 7
        },
        "genres": {
            "$nin": ["Crime", "Horror"]
        },
        "rated": {
            "$in": ["PG", "G"]
        },
        "languages": {
            "$all": ["English", "Japanese"]
        }
    }
}

Step 3:  - Count of all matched documents itcount() OR pretty() print all matched documents.

Step 4:  - Load validateLab1.js into mongo shell

load('validateLab1.js')

Step 5:  - Run the validateLab1 validation method

validateLab1( < your - pipeline - stages > )