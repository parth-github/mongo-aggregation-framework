// Basic Aggregation - Utility Stages
// Lab: Bringing it all together

PROBLEM #1

Calculate an average rating for each movie in 'movies' collection where :-

	(a) English is an available language.
	
	(b)	The minimum imdb.rating is at least 1.
	
	(c) The minimum imdb.votes is at least 1.
	
	(d) And, the movie was released in 1990 or after.
	
Compute the rescale (or normalize) imdb.votes. The formula to rescale imdb.votes and calculate normalized_rating is as below:

// general scaling
min + (max - min) * ((x - x_min) / (x_max - x_min))

// we will use 1 as the minimum value and 10 as the maximum value for scaling,
// so all scaled votes will fall into the range [1,10]

scaled_votes = 1 + 9 * ((x - x_min) / (x_max - x_min))

// NOTE: We CANNOT simply do 10 * ((x - x_min))..., results will be wrong
// Order of operations is important!

// use these values for scaling imdb.votes
x_max = 1521105
x_min = 5
min = 1
max = 10
x = imdb.votes



Lastly, find what film has the lowest normalized_rating ?

HINT: normalized_rating = average(scaled_votes, imdb.rating).


SOLUTION :

Step 1:- Store our x_max, x_min, min, max in corresponding variables for easy reference within the pipeline.

Step 2:- $match stage to filter documents based on above mentioned conditions in problem statement.
		
	{
	    "$match": {
	        "languages": "English",
	        "imdb.rating": {
	            "$gte": 1
	        },
	        "imdb.votes": {
	            "$gte": 1
	        },
	        "released": {
	            "$gte": ISODate("1990-01-01T00:00:00Z")
	        }
	    }
	}
	
Step 3:- $addFields stage to rescale (or normalize) imdb.votes.

As per formula, scaled_votes = 1 + 9 * ((x - x_min) / (x_max - x_min))

	$add : Adds numbers together or adds numbers and a date. If one of the arguments is a date, 
		   $add treats the other arguments as milliseconds to add to the date.

	$subtract : Subtracts two numbers/ two dates to return the difference in mumber / milliseconds.Pass the arguments 
				to $subtract in an array. The second argument is subtracted from the first argument.
	
	$divide : Divides one number by another and returns the result. Pass the arguments to $divide in an array.
			  The first argument is divided by the second argument.
			  
	$multiply : Multiplies numbers together and returns the result. Pass the arguments to $multiply in an array.
	
		  
	{
	    "$addFields": {
	        "scaled_votes": {
	            "$add": [1, {
	                    "$multiply": [9, {
	                            "$divide": [{
	                                    "$subtract": ["$imdb.votes", x_min]
	                                }, {
	                                    "$subtract": [x_max, x_min]
	                                }
	                            ]
	                        }
	                    ]
	                }
	            ]
	        }
	    }
	}
	
Step 4:- $project stage to remove _id field from filtered documents. include title, imdb.rating, scaled_votes fields in filtered documents.
		calculate normalized_rating and store in newly created fields.
		
		normalized_rating = average(scaled_votes, imdb.rating)
		
	$avg : Returns the average value of the numeric values. $avg ignores non-numeric values.
	
	Syntax: { $avg: <expression> } // for one specified exspression as its operand
			
			{ $avg: [ <expression1>, <expression2> ... ]  } // list of specified expressions as its operand

	{
	    "$project": {
	        "_id": 0,
	        "title": 1,
	        "imdb.rating": 1,
	        "scaled_votes": 1,
	        "normalized_rating": {
	            "$avg": ["$scaled_votes", "$imdb.rating"]
	        }
	    }
	}
	
Step 5:- Sort documents by lowest normalized_rating in ascending order

	{
	    "$sort": {
	        "normalized_rating": 1
	    }
	}
 
Step 6:- Limit the result to print only 1 document i.e first document by cursor having lowest normalized_rating

	{
	    "$limit": 1
	}
 