/* Basic Aggregation - $match and $project
Lab - Computing Fields
*/

PROBLEM #1:

Using the Aggregation Framework, find a count of the number of movies that have a title composed of one word. 
To clarify, "Cinderella" and "3-25" should count, where as "Cast Away" would not.

Hint: Use '$split' and the '$size' expression in your pipeline stages.

SOLUTION:

Step 1:- $match stage to ensure we filter all movies where the title is a string.

	{
	    "$match": {
	        "title": {
	            "$type": "string"
	        }
	    }
	}
	
Step 2:- $project stage to divide/split the 'title' which has spaces . for ex: Cast Away cantains two strings with space - Cast Away

	{
	    "$project": {
	        "title": {
	            "$split": ["$title", " "]
	        },
	        "_id": 0
	    }
	}
	
Step 3:- $match stage to filter documents which has only one element (size is 1) in the newly computed title field..
		Size of array must be only 1 to select movie title with only one word.
		
	{
	    "$match": {
	        "title": {
	            "$size": 1
	        }
	    }
	}
	
Step 4:- Count all documents itcount(), after filtering done by multiple pipeline stages.



PROBLEM #2:
 
From 'persons' collection find total number of persons for every gender group (male, female) and find average age per gender 
for all the people who are older than 50 years. 

Sort the returned results(documents) by number of persons in descending order.
			
SOLUTION: 

Step 1:- $match stage to filter all documents based on given condition(s)

	(A) People who are older than 50 years.
	
	{
	    "$match": {
	        "dob.age": {
	            "$gt": 50
	        }
	    }
	}
	
Step 2:- $group stage to group input documents by gender. Based on gender count total number of people for each gender.
		 calculate average age for each gender.
		 
	{
	    "$group": {
	        "_id": {
	            "gender": "$gender"
	        },
	        "totalCount": {
	            "$sum": 1
	        },
	        "averageAge": {
	            "$avg": "$dob.age"
	        }
	    }
	}
	
Step 3:- Sort the returned results(documents) by number of persons in descending order.

	{
	    "$sort": {
	        "totalCount": -1
	    }
	}
	

Step 4:- pretty() print the result on console or itcount() the total filtered accumulated documents from pipeline stages.
		 
		 
	



